# --- OpenTelemetry Collector ---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  labels:
    app: otel-collector # Label for easier deletion
data:
  config.yaml: |
    receivers:
      otlp: # Receives TRACES from our apps
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
      hostmetrics: # Added back to activate metrics pipeline
        collection_interval: 10s
        scrapers: # Specify desired scrapers explicitly
           cpu:
           memory:
           network:
           filesystem:

    processors:
      batch:
      # This processor reads TRACES and generates METRICS
      spanmetrics:
        # It sends its generated metrics DIRECTLY to the exporter named here:
        metrics_exporter: prometheus
        latency_histogram_buckets: [100ms, 300ms, 500ms, 750ms, 1s, 2s]
        # Adding dimensions helps identify the source service
        # service.name is added automatically by default
        dimensions:
          - name: http.method
          - name: http.status_code

    exporters:
      # This exporter MUST be defined for spanmetrics AND metrics pipeline
      prometheus:
        endpoint: "0.0.0.0:8889"
      # Use debug exporter (renamed from logging)
      debug:
        verbosity: basic

    service:
      telemetry:
        logs:
          level: "info"
      pipelines:
        # Pipeline ONLY for TRACES
        traces:
          receivers: [otlp]
          # CRITICAL: spanmetrics processes traces here
          processors: [spanmetrics, batch]
          # Traces go ONLY to the debug exporter
          exporters: [debug]

        # VALID metrics pipeline to ensure prometheus exporter starts
        metrics:
          receivers: [hostmetrics] # Use hostmetrics as input
          processors: [batch]
          exporters: [prometheus, debug] # Use prometheus exporter here

---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  labels:
    app: otel-collector # Label for easier deletion
spec:
  selector:
    app: otel-collector
  ports:
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
    - name: prom-metrics
      port: 8889
      targetPort: 8889
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector-deployment
  labels:
    app: otel-collector # Label for easier deletion
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      containers:
        - name: otel-collector
          # Use the version confirmed to have spanmetrics
          image: otel/opentelemetry-collector-contrib:0.91.0
          imagePullPolicy: IfNotPresent
          args:
            - "--config=/conf/config.yaml"
          volumeMounts:
            - name: config-volume
              mountPath: /conf
          ports:
            - containerPort: 4317
              name: otlp-grpc
            - containerPort: 8889
              name: prom-metrics
      volumes:
        - name: config-volume
          configMap:
            name: otel-collector-config

# --- Prometheus ---
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  labels:
    app: prometheus # Label for easier deletion
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s # Scrape targets every 15 seconds

    scrape_configs:
      - job_name: 'otel-collector'
        static_configs:
          - targets: ['otel-collector:8889'] # Target the OTel collector service
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  labels:
    app: prometheus # Label for easier deletion
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus # Label for easier deletion
# (Rules are correct as before)
rules:
  - apiGroups: [""]
    resources: ["nodes", "services", "endpoints", "pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: prometheus # Label for easier deletion
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  labels:
    app: prometheus # Label for easier deletion
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus # Use the ServiceAccount with permissions
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.retention.time=12h" # Keep data for 12h
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  labels:
    app: prometheus # Label for easier deletion
spec:
  type: ClusterIP # Internal service only
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    app: prometheus

# --- Grafana ---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  labels:
    app: grafana # Label for easier deletion
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.0.0
          ports:
            - containerPort: 3000
          env: # Auto-configure Prometheus datasource
            - name: GF_DATASOURCES_DEFAULT_NAME
              value: "Prometheus"
            - name: GF_DATASOURCES_0_NAME
              value: "Prometheus"
            - name: GF_DATASOURCES_0_TYPE
              value: "prometheus"
            - name: GF_DATASOURCES_0_URL
              value: "http://prometheus:9090" # Internal service name
            - name: GF_DATASOURCES_0_ACCESS
              value: "proxy"
            - name: GF_DATASOURCES_0_IS_DEFAULT
              value: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  labels:
    app: grafana # Label for easier deletion
spec:
  type: ClusterIP # Access via port-forward
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: grafana
