# 1. This is the "identity" our scaler pod will use.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scaler-service-account
---
# 2. This is the "list of permissions" we are granting.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: deployment-scaler-role
rules:
  # It needs permission to "get" and "list" deployments
  # so it can check their current replica count.
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch"]
  # It needs permission to "patch" deployments
  # so it can update the replica count (i.e., scale them).
  - apiGroups: ["apps"]
    resources: ["deployments/scale"]
    verbs: ["patch", "update"]
---
# 3. This "binds" the permissions to the identity.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: scaler-role-binding
subjects:
  # Subject is the "identity" we created
  - kind: ServiceAccount
    name: scaler-service-account
    namespace: default # Assumes we're running in the 'default' namespace
roleRef:
  # RoleRef is the "list of permissions" we created
  kind: ClusterRole
  name: deployment-scaler-role
  apiGroup: rbac.authorization.k8s.io
---
# 4. This is the actual Deployment for our scaler script.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-scaler-deployment
spec:
  replicas: 1 # We only ever want one "brain" running
  selector:
    matchLabels:
      app: custom-scaler
  template:
    metadata:
      labels:
        app: custom-scaler
    spec:
      # CRITICAL: Tell this pod to use the special identity
      serviceAccountName: scaler-service-account

      # We need our ACR secret to pull this image too
      imagePullSecrets:
        - name: acr-secret

      containers:
        - name: scaler
          # --- THIS IS THE CHANGE ---
          image: poornavscaleregistry.azurecr.io/scaler:v3
          env:
            # Pass the internal URL of our Prometheus service to the script
            - name: PROMETHEUS_URL
              value: "http://prometheus:9090"
