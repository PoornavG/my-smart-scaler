apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
data:
  config.yaml: |
    receivers:
      otlp: # Receives TRACES from our apps
        protocols:
          # --- Revert to gRPC (less likely to be the issue) ---
          grpc:
            endpoint: "0.0.0.0:4317"
      # Dummy receiver for metrics pipeline validation
      prometheus/self:
        config:
          scrape_configs:
            - job_name: 'otel-collector-internal'
              scrape_interval: 1m # Scrape less often, it's just for validation
              static_configs:
                - targets: [ 'localhost:8888' ] # Internal metrics port

    processors:
      batch:
      # This processor reads TRACES and generates METRICS
      spanmetrics:
        metrics_exporter: prometheus # Tells spanmetrics which exporter to use
        latency_histogram_buckets: [100ms, 300ms, 500ms, 750ms, 1s, 2s]
        dimensions:
          - name: http.method
          - name: http.status_code

    exporters:
      # Define the prometheus exporter (listens on 8889)
      prometheus:
        endpoint: "0.0.0.0:8889"
      # Debug exporter for seeing traces/metrics in logs
      debug:
        verbosity: basic

    service:
      telemetry:
        logs:
          level: "info"
        metrics:
          address: ":8888" # Exposes internal collector metrics
      pipelines:
        # Pipeline ONLY for TRACES
        traces:
          receivers: [otlp]
          processors: [spanmetrics, batch] # Spanmetrics processes traces here
          exporters: [debug] # Traces go ONLY to the debug exporter

        # Define a metrics pipeline EXPLICITLY to activate prometheus exporter
        metrics:
          # Use the dummy 'prometheus/self' receiver to satisfy validation
          receivers: [prometheus/self]
          processors: [batch]
          # CRITICAL: Activate prometheus exporter HERE
          exporters: [prometheus, debug]
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
spec:
  selector:
    app: otel-collector
  ports:
    # --- Revert to gRPC port ---
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
    - name: prom-metrics
      port: 8889
      targetPort: 8889
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      containers:
        - name: otel-collector
          image: otel/opentelemetry-collector-contrib:0.91.0
          imagePullPolicy: IfNotPresent
          args:
            - "--config=/conf/config.yaml"
          volumeMounts:
            - name: config-volume
              mountPath: /conf
          ports:
            # --- Revert to gRPC port ---
            - containerPort: 4317
              name: otlp-grpc
            - containerPort: 8889
              name: prom-metrics
            - containerPort: 8888 # Internal metrics endpoint
              name: prom-internal
      volumes:
        - name: config-volume
          configMap:
            name: otel-collector-config
